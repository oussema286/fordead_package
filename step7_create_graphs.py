#!/usr/bin/env python3
"""
Script pour l'√©tape 7: Create graphs
Ce script cr√©e des graphiques de s√©ries temporelles pour visualiser
l'√©volution des indices de v√©g√©tation au niveau des pixels.
"""

from fordead.visualisation.vi_series_visualisation import vi_series_visualisation

def main():
    # Configuration des chemins
    data_directory = "tuto_output"
    shape_path = "fordead_data-main/fordead_data-main/vector/points_for_graphs.shp"
    
    print("=== √âtape 7: Create graphs ===")
    print(f"R√©pertoire de donn√©es: {data_directory}")
    print(f"Fichier de points: {shape_path}")
    print()
    
    # Param√®tres de configuration
    params = {
        'data_directory': data_directory,
        'shape_path': shape_path,  # Fichier shapefile avec les points
        'name_column': "id",  # Colonne contenant les identifiants
        'ymin': 0,  # Limite minimale de l'axe Y
        'ymax': 2,  # Limite maximale de l'axe Y
        'chunks': 1280  # Taille des chunks pour l'optimisation
    }
    
    print("Param√®tres utilis√©s:")
    for key, value in params.items():
        print(f"  {key}: {value}")
    print()
    
    print("Explication des graphiques:")
    print("  1. Cr√©ation de graphiques de s√©ries temporelles par pixel")
    print("  2. Affichage des valeurs d'indices de v√©g√©tation observ√©es")
    print("  3. Superposition du mod√®le harmonique ajust√©")
    print("  4. Indication du seuil de d√©tection d'anomalie")
    print("  5. Marquage de la p√©riode d'entra√Ænement")
    print()
    
    print("Contenu des graphiques:")
    print("  - Valeurs d'indices de v√©g√©tation (points bleus)")
    print("  - Mod√®le harmonique ajust√© (ligne rouge)")
    print("  - Seuil d'anomalie (ligne horizontale)")
    print("  - P√©riode d'entra√Ænement (zone gris√©e)")
    print("  - Anomalies d√©tect√©es (marqu√©es)")
    print()
    
    print("Types de pixels analys√©s:")
    print("  - Pixels sains: √âvolution normale de la v√©g√©tation")
    print("  - Pixels attaqu√©s: D√©tection d'anomalies de d√©p√©rissement")
    print("  - Comparaison des patterns temporels")
    print()
    
    print("Utilisation des graphiques:")
    print("  - Validation des d√©tections de d√©p√©rissement")
    print("  - Compr√©hension des patterns temporels")
    print("  - Analyse de la qualit√© du mod√®le harmonique")
    print("  - Documentation des r√©sultats")
    print()
    
    try:
        print("D√©but de la cr√©ation des graphiques...")
        vi_series_visualisation(**params)
        print("‚úÖ Graphiques cr√©√©s avec succ√®s!")
        print()
        print("R√©sultats g√©n√©r√©s dans:")
        print(f"  - {data_directory}/TimeSeries/")
        print(f"    - Fichiers .png pour chaque point (id_1.png, id_2.png, etc.)")
        print()
        print("Caract√©ristiques des graphiques:")
        print("  - Format: PNG haute r√©solution")
        print("  - Axe Y: 0 √† 2 (indices de v√©g√©tation)")
        print("  - Axe X: Temps (dates des acquisitions)")
        print("  - L√©gende: Mod√®le, seuil, p√©riode d'entra√Ænement")
        print()
        print("Utilisation des graphiques:")
        print("  - Ouvrir les fichiers .png dans un visualiseur d'images")
        print("  - Analyser l'√©volution temporelle des pixels")
        print("  - Valider les d√©tections de d√©p√©rissement")
        print("  - Comprendre les patterns de stress forestier")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des graphiques: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ √âtape 7 termin√©e avec succ√®s!")
        print("üìä Graphiques de s√©ries temporelles cr√©√©s!")
    else:
        print("\nüí• √âchec de l'√©tape 7")

#!/usr/bin/env python3
"""
Pipeline complet avec de vraies donn√©es Sentinel-2 via Google Earth Engine
"""

import sys
import os
from pathlib import Path
import yaml
import logging
from datetime import datetime
import numpy as np
import xarray as xr
import geopandas as gpd
from shapely.geometry import box
import ee

# Ajouter le r√©pertoire technical_test au path
sys.path.append('technical_test')

def run_pipeline_real_gee():
    """Lancer le pipeline complet avec de vraies donn√©es Sentinel-2"""
    print("üöÄ PIPELINE COMPLET AVEC VRAIES DONN√âES SENTINEL-2")
    print("=" * 60)
    
    try:
        # 1. Charger la configuration
        print("\nüìã √âTAPE 1 : Chargement de la configuration")
        with open('technical_test/configs/config_test.yaml', 'r') as f:
            config = yaml.safe_load(f)
        print(f"  ‚úÖ Configuration charg√©e: {config['project_name']} v{config['version']}")
        
        # 2. Cr√©er une parcelle de test
        print("\nüó∫Ô∏è √âTAPE 2 : Cr√©ation de la parcelle de test")
        
        # Parcelle: For√™t de Fontainebleau (France)
        bbox = [2.6, 48.3, 2.8, 48.5]  # [minx, miny, maxx, maxy]
        geometry = [box(bbox[0], bbox[1], bbox[2], bbox[3])]
        roi = gpd.GeoDataFrame({'id': [1], 'name': ['Fontainebleau']}, 
                              geometry=geometry, crs='EPSG:4326')
        
        print(f"  ‚úÖ Parcelle cr√©√©e: Fontainebleau")
        print(f"    - Bbox: {bbox}")
        print(f"    - Surface: {(bbox[2]-bbox[0])*(bbox[3]-bbox[1]):.4f} deg¬≤")
        
        # 3. Initialiser l'ingestion avec Google Earth Engine
        print("\nüîß √âTAPE 3 : Initialisation de l'ingestion avec Google Earth Engine")
        from technical_test.data_ingestion_gee import Sentinel2IngestionGEE
        ingestion = Sentinel2IngestionGEE(config)
        print("  ‚úÖ Ingestion Sentinel-2 avec GEE initialis√©e")
        
        # 4. T√©l√©charger de vraies donn√©es Sentinel-2 (si pas d√©j√† fait)
        print("\nüì• √âTAPE 4 : T√©l√©chargement de vraies donn√©es Sentinel-2")
        
        # V√©rifier si les donn√©es existent d√©j√†
        data_dir = os.path.join(config['output']['base_path'], 'data', 'sentinel2_gee')
        if os.path.exists(data_dir) and os.listdir(data_dir):
            print("  üìÅ Donn√©es Sentinel-2 d√©j√† t√©l√©charg√©es, r√©utilisation...")
            # Lister les acquisitions existantes
            acquisitions = []
            for acq_name in sorted(os.listdir(data_dir)):
                acq_path = os.path.join(data_dir, acq_name)
                if os.path.isdir(acq_path) and acq_name.startswith('SENTINEL2_'):
                    date_str = acq_name.replace('SENTINEL2_', '')
                    acquisitions.append({
                        'title': acq_name,
                        'date': f"{date_str[:4]}-{date_str[4:6]}-{date_str[6:8]}",
                        'path': acq_path,
                        'real_data': True
                    })
            print(f"  ‚úÖ Donn√©es Sentinel-2 r√©utilis√©es: {len(acquisitions)} acquisitions")
        else:
            acquisitions = ingestion.download_sentinel2_data(roi)
            print(f"  ‚úÖ Donn√©es Sentinel-2 t√©l√©charg√©es: {len(acquisitions)} acquisitions")
        
        if acquisitions and acquisitions[0].get('real_data', False):
            print(f"    - Source: VRAIES DONN√âES SENTINEL-2 ‚úÖ")
            print(f"    - P√©riode: {acquisitions[0]['date']} √† {acquisitions[-1]['date']}")
            print(f"    - Couverture nuageuse moyenne: {np.mean([acq.get('cloud_cover', 0) for acq in acquisitions]):.1f}%")
        else:
            print(f"    - Source: DONN√âES SIMUL√âES ‚ö†Ô∏è")
        
        # 5. Traiter les donn√©es Sentinel-2
        print("\nüîÑ √âTAPE 5 : Traitement des donn√©es Sentinel-2")
        sentinel_data = ingestion.process_sentinel2_data(acquisitions)
        print(f"  ‚úÖ Donn√©es trait√©es: {sentinel_data.dims}")
        print(f"    - Variables: {list(sentinel_data.data_vars)}")
        
        # 6. Int√©gration avec fordead (d√©tection de d√©p√©rissement)
        print("\nüå≤ √âTAPE 6 : D√©tection de d√©p√©rissement avec fordead")
        from technical_test.fordead_wrapper_real import FordeadWrapperReal
        fordead_wrapper = FordeadWrapperReal(config)
        
        # Ex√©cuter le pipeline fordead pour d√©tecter les zones de d√©p√©rissement
        fordead_results = fordead_wrapper.run_fordead_pipeline(sentinel_data)
        print(f"  ‚úÖ Fordead termin√©: {len(fordead_results)} r√©sultats")
        
        # Extraire les pixels de d√©p√©rissement d√©tect√©s
        dieback_pixels = fordead_results.get('dieback_pixels', [])
        print(f"    - Pixels de d√©p√©rissement d√©tect√©s: {len(dieback_pixels)}")
        
        # 7. D√©tection de changements avec ruptures (affinage temporel)
        print("\nüîç √âTAPE 7 : D√©tection de changements avec ruptures")
        from technical_test.change_detection import RupturesDetector
        detector = RupturesDetector(config)
        
        # D√©tecter les changements sur l'indice CRSWIR (affinage temporel des pixels fordead)
        vi_data = sentinel_data['crswir']
        change_results = detector.detect_changes(vi_data)
        print(f"  ‚úÖ D√©tection termin√©e: {len(change_results['change_points'])} changements d√©tect√©s")
        print(f"    - Affinage temporel des pixels d√©tect√©s par fordead")
        
        # Sauvegarder les masques de d√©tection
        from pathlib import Path
        detections_dir = Path(config['output']['detections'])
        detections_dir.mkdir(parents=True, exist_ok=True)
        detector.save_results(change_results, detections_dir)
        print(f"  ‚úÖ Masques sauvegard√©s dans: {detections_dir}")
        
        # 8. Chargement des donn√©es de perturbation de r√©f√©rence
        print("\nüó∫Ô∏è √âTAPE 8 : Chargement des donn√©es de perturbation de r√©f√©rence")
        from technical_test.disturbance_map_integration import DisturbanceMapIntegrator
        from technical_test.era5_wind_analysis import ERA5WindAnalyzer
        from technical_test.advanced_classification import AdvancedWindBeetleClassifier
        
        # Charger les donn√©es de perturbation
        disturbance_integrator = DisturbanceMapIntegrator(config)
        
        # Charger la ROI depuis le fichier GeoJSON
        import geopandas as gpd_roi
        roi_file = config['roi']['file_path']
        if os.path.exists(roi_file):
            roi_gdf = gpd_roi.read_file(roi_file)
            roi_bounds = roi_gdf.total_bounds
            roi_geometry = ee.Geometry.Rectangle([roi_bounds[0], roi_bounds[1], roi_bounds[2], roi_bounds[3]])
            print(f"  üìç ROI charg√©e depuis {roi_file}: {roi_bounds}")
        else:
            # Fallback vers les coordonn√©es de la config
            bbox = config['roi']['bbox']
            roi_geometry = ee.Geometry.Rectangle([bbox[0], bbox[1], bbox[2], bbox[3]])
            print(f"  üìç ROI utilis√©e depuis config: {bbox}")
        
        disturbance_data = disturbance_integrator.load_disturbance_data(roi_geometry)
        print(f"  ‚úÖ Donn√©es de perturbation charg√©es: {disturbance_data['total_events']} √©v√©nements")
        
        # Extraire les donn√©es de vent ERA5
        print("\nüå™Ô∏è √âTAPE 9 : Extraction des donn√©es de vent ERA5")
        wind_analyzer = ERA5WindAnalyzer(config)
        wind_data = wind_analyzer.extract_wind_data(disturbance_data['disturbances'], roi_geometry)
        print(f"  ‚úÖ Donn√©es de vent extraites: {wind_data['total_analyzed']} analyses")
        
        # Classification avanc√©e
        print("\nüî¨ √âTAPE 10 : Classification avanc√©e Wind vs Bark Beetle")
        classifier = AdvancedWindBeetleClassifier(config)
        classification_results = classifier.classify_disturbances(
            disturbance_data['disturbances'], 
            wind_data['wind_data']
        )
        print(f"  ‚úÖ Classification termin√©e: {classification_results['total_classified']} classifications")
        print(f"    - Pr√©cision: {classification_results['metrics']['precision']:.3f}")
        print(f"    - Rappel: {classification_results['metrics']['recall']:.3f}")
        print(f"    - D√©lai de d√©tection: {classification_results['metrics']['detection_lead_time_days']:.1f} jours")
        
        # Sauvegarder les r√©sultats
        classifier.save_classification_results(classification_results, Path(config['output']['classifications']))
        wind_analyzer.save_wind_data(wind_data, Path(config['output']['wind_data']))
        disturbance_integrator.save_disturbance_data(disturbance_data, Path(config['output']['disturbances']))
        
        # Extraire les classifications pour compatibilit√©
        classifications = [c['classified_type'] for c in classification_results['classifications']]
        print(f"  ‚úÖ Classifications simul√©es: {len(classifications)}")
        
        # 11. √âvaluation des performances
        print("\nüìä √âTAPE 11 : √âvaluation des performances")
        from technical_test.evaluation import DisturbanceEvaluator
        evaluator = DisturbanceEvaluator(config)
        
        # Cr√©er un dictionnaire structur√© pour l'√©valuation
        evaluation_data = {
            'change_points': change_results['change_points'],
            'classifications': classifications,
            'result_maps': change_results.get('result_maps', {}),
            'change_analysis': change_results.get('change_analysis', {})
        }
        
        try:
            evaluation_results = evaluator.evaluate_detections(evaluation_data)
            print(f"  ‚úÖ √âvaluation termin√©e: {list(evaluation_results.keys())}")
        except Exception as e:
            print(f"  ‚ö†Ô∏è Erreur √©valuation: {e}")
            evaluation_results = {'metrics': {'precision': 0.0, 'recall': 0.0}}
        
        # 10. R√©sum√© final
        print("\nüéâ PIPELINE COMPLET TERMIN√â AVEC SUCC√àS !")
        print("=" * 60)
        print(f"üìä R√©sultats finaux:")
        print(f"  - Acquisitions Sentinel-2: {len(acquisitions)}")
        print(f"  - Changements d√©tect√©s: {len(change_results['change_points'])}")
        print(f"  - Classifications: {len(classifications)}")
        print(f"  - Pixels fordead d√©tect√©s: {len(dieback_pixels)}")
        print(f"  - Changements ruptures: {len(change_results['change_points'])}")
        print(f"  - R√©sultats fordead: {len(fordead_results)}")
        print(f"  - M√©triques d'√©valuation: {len(evaluation_results)}")
        
        # Statistiques des classifications
        wind_count = classifications.count('wind')
        beetle_count = classifications.count('bark_beetle')
        print(f"  - Classifications vent: {wind_count}")
        print(f"  - Classifications scolytes: {beetle_count}")
        
        # V√©rifier si on a utilis√© de vraies donn√©es
        if acquisitions and acquisitions[0].get('real_data', False):
            print(f"  - Source: VRAIES DONN√âES SENTINEL-2 ‚úÖ")
            print(f"  - M√©thode: Google Earth Engine")
        else:
            print(f"  - Source: DONN√âES SIMUL√âES ‚ö†Ô∏è")
        

        
        return True
        
    except Exception as e:
        print(f"\n‚ùå Erreur dans le pipeline: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = run_pipeline_real_gee()
    if success:
        print("\n‚úÖ Pipeline complet r√©ussi !")
    else:
        print("\n‚ùå Pipeline √©chou√© !")

# .shared_windows_runners:
#   tags:
#   - win10-mop8243
  # - shared-windows
  # - windows
  # - windows-1809

.win10_runner:
  tags:
  - win10

stages:
  - test
  - deploy

variables:
  GIT_STRATEGY: clone

## docker build does not end within the 1h limit
## thus it was build locally and transfered manually
#docker-ci:
#  stage: deploy
#  image: docker:19.03.8
#  services:
#    - docker:19.03.8-dind
#  script:
#    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#    - export VERSION=`grep __version__ fordead/_version.py| sed -E 's/.*([0-9]+\.[0-9]+\.[0-9]+).*/\1/'`
#    - echo $CI_REGISTRY_IMAGE
#    - echo $VERSION
#    - docker pull $CI_REGISTRY_IMAGE:latest || true
#    - docker build --cache-from $CI_REGISTRY_IMAGE:latest -t $CI_REGISTRY_IMAGE:$VERSION .
#    - docker push $CI_REGISTRY_IMAGE:$VERSION
#  only:
#    - docker_ci

test-win10:
  stage: test
  extends:
    - .win10_runner
  script:
    - git config --system core.longpaths true
    # recover the good tags
    - git tag --delete $(git tag) # delete all local tags  
    - git fetch --all    
    # installs Miniforge if $env:userprofile\miniforge3 is not found
    # otherwise just loads profile
    - gitlab-ci\conda-build.ps1
    - mamba env create -y -n fordead-gitlab-ci -f environment.yml
    - mamba install -y -n fordead-gitlab-ci pytest
    - conda run -n fordead-gitlab-ci --live-stream pip install -e .
    - conda run -n fordead-gitlab-ci --live-stream pytest -s tests
  rules:
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME == "dev" && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH
    - if: $CI_MERGE_REQUEST_SOURCE_BRANCH_NAME =~ /^win/ && $CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"
    - if: $CI_COMMIT_BRANCH =~ /^win/ && $CI_PIPELINE_SOURCE == "schedule"


install-linux:
  stage: test
  image: mambaorg/micromamba
  variables:
    MAMBA_DOCKERFILE_ACTIVATE: 1
  script:
    - micromamba install -y -n base -f environment.yml
    - micromamba install -y -n base -c conda-forge pytest
    - pip install -e .
    - python -c "import fordead"
    - pytest -s tests
  only:
    - merge_requests
    - dev
    - master
    # - v1

#[![version](https://img.shields.io/badge/dynamic/json.svg?label=version&url=https://gitlab.com/fordead/fordead_package/-/jobs/artifacts/master/raw/badges.json?job=badges&query=version&colorB=blue)](https://gitlab.com/fordead/fordead_package)
# make-badge:
#   stage: deploy
#   image: python:latest
#   script:
#     - pip install setuptools-scm
#     - version=`python -m setuptools_scm --strip-dev`
#     - echo "{\"version\":\"$version\"}" > badges.json
#   artifacts:
#     paths:
#       - badges.json
#   only:
#     - master
#     - pages

pages:
  stage: deploy
  image: mambaorg/micromamba
  variables:
    GIT_STRATEGY: clone
    MAMBA_DOCKERFILE_ACTIVATE: 1
    PAGES_BRANCH: gl-pages
    HTTPS_REMOTE: https://gitlab-ci-token:${PAGES_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}
  script:
    - micromamba install -y -n base -f environment.yml
    - pip install -e .
    - pip install -r docs/requirements.txt
    # generate API reference
    - python docs/gen_ref_pages_standalone.py
    # Make indexes pages from REAMDE
    # - sed -e "s:](docs/:](:g" README.md | sed -e "2,12d" | sed -e "1 i ---\ntitle: Overview\n---" > docs/index.md
    - 'sed -e "s:](docs/:](:g" -e "2,12d" -e "1 i ---\ntitle: Overview\n---" README.md > docs/index.md'
    - 'sed -e "s:](docs/:](:g" -e "1 i ---\ntitle: Accueil\n---" README_fr.md > docs/index.fr.md'
    # versioning documentation with mike
    - git config user.name "${GITLAB_USER_NAME}"
    - git config user.email "${GITLAB_USER_EMAIL}"
    - git fetch origin $PAGES_BRANCH && git checkout -b $PAGES_BRANCH origin/$PAGES_BRANCH || echo "Pages branch not deployed yet."
    - git checkout $CI_COMMIT_SHA
    - export FORDEAD_VERSION=$(python -c "import fordead; print(fordead.__version__)")
    - export PAGES_VERSION="${CI_COMMIT_TAG:-v${FORDEAD_VERSION}}"
    - echo $PAGES_VERSION
    - mike deploy -r $HTTPS_REMOTE -p -b $PAGES_BRANCH -u $PAGES_VERSION latest
    - mike set-default -r $HTTPS_REMOTE -p -b $PAGES_BRANCH latest
    - git checkout $PAGES_BRANCH -- public
  artifacts:
    paths:
     - public
  # rules:
  #   - if: $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+/

zenodo:
  stage: deploy
  image: python:3.7
  rules:
    - if: $CI_COMMIT_TAG =~ /^v?[0-9]+\.[0-9]+/
  variables:
    VERSION: $CI_COMMIT_TAG  
  script:
    - pip install git+https://gitlab.com/sbeniamine/gitlab2zenodo
    - git archive --format zip --worktree-attributes --output ${CI_PROJECT_TITLE}-${VERSION}.zip ${VERSION}
    - unzip -l ${CI_PROJECT_TITLE}-${VERSION}.zip
    - g2z-get-meta -i $zenodo_record -o .zenodo.json
    - vdate=$(git log -1 --format=%cd --date=short $VERSION) && sed -i "s/[0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/${vdate}/g" .zenodo.json
    - g2z-send -i $zenodo_record -t $zenodo_token -m .zenodo.json -v ${VERSION} ${CI_PROJECT_TITLE}-${VERSION}.zip

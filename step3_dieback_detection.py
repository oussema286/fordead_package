#!/usr/bin/env python3
"""
Script pour l'√©tape 3: Dieback detection
Ce script d√©tecte les anomalies en comparant les indices de v√©g√©tation observ√©s
aux valeurs pr√©dites par le mod√®le harmonique.
"""

from fordead.steps.step3_dieback_detection import dieback_detection

def main():
    # Configuration des chemins
    data_directory = "tuto_output"
    
    print("=== √âtape 3: Dieback detection ===")
    print(f"R√©pertoire de donn√©es: {data_directory}")
    print()
    
    # Param√®tres de configuration
    params = {
        'data_directory': data_directory,
        'threshold_anomaly': 0.16,  # Seuil d'anomalie
        'stress_index_mode': "weighted_mean"  # Mode de calcul de l'index de stress
    }
    
    print("Param√®tres utilis√©s:")
    for key, value in params.items():
        print(f"  {key}: {value}")
    print()
    
    print("Explication du processus de d√©tection:")
    print("  1. Pour chaque acquisition apr√®s la p√©riode d'entra√Ænement:")
    print("     - Calcul de la valeur pr√©dite par le mod√®le harmonique")
    print("     - Comparaison avec la valeur observ√©e")
    print("     - Calcul de l'anomalie: |valeur_observ√©e - valeur_pr√©dite|")
    print()
    print("  2. D√©tection d'anomalie:")
    print("     - Si anomalie > seuil (0.16) ‚Üí pixel marqu√© comme anomalie")
    print("     - Si anomalie ‚â§ seuil ‚Üí pixel normal")
    print()
    print("  3. Confirmation du d√©p√©rissement:")
    print("     - 3 anomalies successives ‚Üí d√©p√©rissement confirm√©")
    print("     - < 3 anomalies successives ‚Üí pas de d√©p√©rissement")
    print()
    print("  4. Retour √† la normale:")
    print("     - 3 acquisitions normales successives ‚Üí retour √† la normale")
    print("     - R√©duit les faux positifs (s√©cheresse prolong√©e)")
    print()
    print("  5. Index de stress:")
    print("     - Calcul√© pour chaque p√©riode de stress")
    print("     - Mode 'weighted_mean': moyenne pond√©r√©e des anomalies")
    print("     - Utilis√© comme indice de confiance")
    print()
    
    try:
        print("D√©but de la d√©tection de d√©p√©rissement...")
        dieback_detection(**params)
        print("‚úÖ D√©tection termin√©e avec succ√®s!")
        print()
        print("R√©sultats g√©n√©r√©s dans:")
        print(f"  - {data_directory}/DataDieback/ (donn√©es de d√©p√©rissement)")
        print(f"    - count_dieback.tif (nombre d'anomalies successives)")
        print(f"    - first_date_unconfirmed_dieback.tif (premi√®re anomalie)")
        print(f"    - first_date_dieback.tif (premi√®re anomalie confirm√©e)")
        print(f"    - state_dieback.tif (√©tat de d√©p√©rissement binaire)")
        print(f"  - {data_directory}/DataStress/ (donn√©es de stress)")
        print(f"    - dates_stress.tif (dates des p√©riodes de stress)")
        print(f"    - nb_periods_stress.tif (nombre de p√©riodes de stress)")
        print(f"    - cum_diff_stress.tif (somme des diff√©rences)")
        print(f"    - nb_dates_stress.tif (nombre d'acquisitions par p√©riode)")
        print(f"    - stress_index.tif (index de stress)")
        print(f"  - {data_directory}/DataAnomalies/ (anomalies par date)")
        print(f"    - Anomalies_YYYY-MM-DD.tif (anomalies d√©tect√©es)")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de la d√©tection: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ √âtape 3 termin√©e avec succ√®s!")
    else:
        print("\nüí• √âchec de l'√©tape 3")

#!/usr/bin/env python3
"""
Script pour l'√©tape 2: Train model
Ce script ajuste un mod√®le harmonique pour chaque pixel afin de d√©finir la saisonnalit√© normale
de la v√©g√©tation bas√©e sur une p√©riode d'entra√Ænement.
"""

from fordead.steps.step2_train_model import train_model

def main():
    # Configuration des chemins
    data_directory = "tuto_output"
    
    print("=== √âtape 2: Train model ===")
    print(f"R√©pertoire de donn√©es: {data_directory}")
    print()
    
    # Param√®tres de configuration
    params = {
        'data_directory': data_directory,
        'nb_min_date': 10,  # Minimum 10 acquisitions valides
        'min_last_date_training': "2018-01-01",  # Date de fin minimale d'entra√Ænement
        'max_last_date_training': "2018-06-01"   # Date de fin maximale d'entra√Ænement
    }
    
    print("Param√®tres utilis√©s:")
    for key, value in params.items():
        print(f"  {key}: {value}")
    print()
    
    print("Explication du mod√®le harmonique:")
    print("  Le mod√®le ajust√© pour chaque pixel est de la forme:")
    print("  a1 + b1*sin(2œÄt/T) + b2*cos(2œÄt/T) + b3*sin(4œÄt/T) + b4*cos(4œÄt/T)")
    print("  o√π T est la p√©riode (1 an) et t est le temps")
    print()
    
    print("P√©riode d'entra√Ænement:")
    print("  - D√©but: Premi√®re acquisition disponible")
    print("  - Fin: Derni√®re acquisition avant 2018-01-01")
    print("  - Minimum requis: 10 acquisitions valides par pixel")
    print("  - Si < 10 acquisitions le 2018-01-01, utilisation jusqu'au 2018-06-01")
    print("  - Si < 10 acquisitions le 2018-06-01, le pixel est exclu")
    print()
    
    try:
        print("D√©but de l'entra√Ænement du mod√®le harmonique...")
        train_model(**params)
        print("‚úÖ Entra√Ænement termin√© avec succ√®s!")
        print()
        print("R√©sultats g√©n√©r√©s dans:")
        print(f"  - {data_directory}/DataModel/ (mod√®le harmonique)")
        print(f"    - first_detection_date_index.tif (index de la premi√®re acquisition)")
        print(f"    - coeff_model.tif (5 coefficients du mod√®le)")
        print(f"  - {data_directory}/TimelessMasks/ (masques temporels)")
        print(f"    - sufficient_coverage_mask.tif (pixels avec couverture suffisante)")
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'entra√Ænement: {e}")
        return False
    
    return True

if __name__ == "__main__":
    success = main()
    if success:
        print("\nüéâ √âtape 2 termin√©e avec succ√®s!")
    else:
        print("\nüí• √âchec de l'√©tape 2")
